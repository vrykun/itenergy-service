"""Replace with Numeric

Revision ID: 0aac60b54a54
Revises: 668e9c4ad38b
Create Date: 2023-12-11 19:13:56.216351

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = '0aac60b54a54'
down_revision = '668e9c4ad38b'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('equipment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('current_solar_power', sa.FLOAT(), nullable=False),
    sa.Column('current_wind_power', sa.FLOAT(), nullable=False),
    sa.Column('capacity', sa.FLOAT(), nullable=False),
    sa.Column('solar_battery_power', sa.FLOAT(), nullable=False),
    sa.Column('wind_power', sa.FLOAT(), nullable=False),
    sa.Column('power_consumption', sa.FLOAT(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_equipment_id'), 'equipment', ['id'], unique=True)
    op.create_table('indicator',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('voltage_deviation', sa.Integer(), nullable=False),
    sa.Column('phase_voltage_ua', sa.Integer(), nullable=False),
    sa.Column('phase_voltage_ub', sa.Integer(), nullable=False),
    sa.Column('phase_voltage_uc', sa.Integer(), nullable=False),
    sa.Column('interphase_voltage_uab', sa.Integer(), nullable=False),
    sa.Column('interphase_voltage_uac', sa.Integer(), nullable=False),
    sa.Column('interphase_voltage_ubc', sa.Integer(), nullable=False),
    sa.Column('asymmetry_coefficient_k2u', sa.Integer(), nullable=False),
    sa.Column('asymmetry_coefficient_k0u', sa.Integer(), nullable=False),
    sa.Column('capacity_battery_pb', sa.Integer(), nullable=False),
    sa.Column('current_solar_power', sa.Integer(), nullable=False),
    sa.Column('current_wind_power', sa.Integer(), nullable=False),
    sa.Column('capacity', sa.Integer(), nullable=False),
    sa.Column('solar_battery_power', sa.Integer(), nullable=False),
    sa.Column('wind_power', sa.Integer(), nullable=False),
    sa.Column('power_consumption', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_indicator_id'), 'indicator', ['id'], unique=True)
    op.drop_index('ix_indicator_data_id', table_name='indicator_data')
    op.drop_table('indicator_data')
    op.drop_index('ix_equipment_data_id', table_name='equipment_data')
    op.drop_table('equipment_data')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('equipment_data',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('current_solar_power', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('current_wind_power', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('capacity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('solar_battery_power', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('wind_power', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('power_consumption', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='equipment_data_pkey')
    )
    op.create_index('ix_equipment_data_id', 'equipment_data', ['id'], unique=False)
    op.create_table('indicator_data',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('voltage_deviation', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('phase_voltage_ua', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('phase_voltage_ub', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('phase_voltage_uc', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('interphase_voltage_uab', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('interphase_voltage_uac', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('interphase_voltage_ubc', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('asymmetry_coefficient_k2u', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('asymmetry_coefficient_k0u', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('capacity_battery_pb', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('current_solar_power', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('current_wind_power', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('capacity', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('solar_battery_power', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('wind_power', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('power_consumption', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='indicator_data_pkey')
    )
    op.create_index('ix_indicator_data_id', 'indicator_data', ['id'], unique=False)
    op.drop_index(op.f('ix_indicator_id'), table_name='indicator')
    op.drop_table('indicator')
    op.drop_index(op.f('ix_equipment_id'), table_name='equipment')
    op.drop_table('equipment')
    # ### end Alembic commands ###
